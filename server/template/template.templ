package template

import (
	"fmt"
	"github.com/romshark/demo-islands/domain"
	"time"
)

templ htmlMain(title string, darkMode bool) {
	<!DOCTYPE html>
	<html
		lang="en"
		if darkMode {
			class="dark sl-theme-dark"
		} else {
			class="sl-theme-light"
		}
	>
		<head>
			<title>{ title }</title>
			<meta name="viewport" content="width=device-width, initial-scale=1"/>
			<meta charset="UTF-8"/>
			<meta name="description" content="Islands-Architecture Web App Demo"/>
			<meta name="color-scheme" content="light dark"/>
			<link rel="stylesheet" href="/public/dist.css"/>
			<script src="https://unpkg.com/htmx.org@2.0.3"></script>
			<script src="https://unpkg.com/idiomorph@0.3.0/dist/idiomorph-ext.min.js"></script>
			<link
				id="stylesheet-shoelace-theme"
				rel="stylesheet"
				if darkMode {
					href="https://cdn.jsdelivr.net/npm/@shoelace-style/shoelace@2.18.0/cdn/themes/dark.css"
				} else {
					href="https://cdn.jsdelivr.net/npm/@shoelace-style/shoelace@2.18.0/cdn/themes/light.css"
				}
			/>
			<script src="/public/components.js" type="module"></script>
			<script src="/public/dist.js"></script>
			<link rel="icon" href="/public/favicon.ico"/>
		</head>
		<body
			hx-ext="morph"
			x-data="app"
			class="dark:bg-neutral-900 dark:text-slate-300"
		>
			<div id="viewport">
				{ children... }
			</div>
		</body>
	</html>
}

templ viewIndex(
	form Form,
	addressCountryOptions []NamedOption,
	shippingCompanyOptions []NamedOption,
	shippingOrders []domain.ShippingDetails,
) {
	<div x-data="{}">
		@hideUntilLoaded() {
			<sl-dialog
				x-ref="signInDialog"
				@sl-show="$refs.avatarMenu.hide()"
				label="Sign in"
				class="dialog-overview"
				label="Whoops"
			>
				This is just a tech-demo, remember?
				<sl-button
					@click="
						$refs.signInDialog.hide()
						$refs.formDrawer.show()
					"
					variant="primary"
					slot="footer"
				>Let's add an order!</sl-button>
				<sl-button
					@click="$refs.signInDialog.hide()"
					variant="success"
					slot="footer"
				>Okay ü•≤</sl-button>
			</sl-dialog>
		}
		<nav class="p-4 h-20 flex items-center justify-between w-full">
			<div class="flex flex-row items-center gap-2">
				// Left
				@skeleton("1rem", "1rem") {
					<sl-button
						slot="trigger"
						outline
						circle
						@click="$refs.formDrawer.show()"
					>
						<sl-icon name="plus-circle"></sl-icon>
					</sl-button>
				}
			</div>
			<div class="flex flex-row items-center gap-2">
				// Right
				@skeleton("1rem", "1rem") {
					<sl-dropdown
						x-ref="avatarMenu"
						placement="bottom"
						distance="8"
					>
						<sl-button slot="trigger" outline circle>
							<sl-icon name="person-circle"></sl-icon>
						</sl-button>
						<div
							class="
								flex
								flex-col
								gap-2
								p-2
								rounded
								shadow-md
								border
								border-current
								bg-popupbg
							"
						>
							<sl-select
								label="Theme"
								class="w-32"
								name="theme"
								x-init="$nextTick(() => $el.value = theme || '')"
								@sl-change="(e) => app.setTheme(e.target.value)"
							>
								<sl-option value="">System</sl-option>
								<sl-option value="dark">Dark</sl-option>
								<sl-option value="light">Light</sl-option>
							</sl-select>
							<sl-button
								class="mt-2"
								@click="
									$refs.avatarMenu.hide()
									$refs.signInDialog.show()
								"
								slot="footer"
							>Sign in</sl-button>
						</div>
					</sl-dropdown>
				}
			</div>
		</nav>
		<div class="md:container md:mx-auto ml-4 mr-4 pb-16">
			@hideUntilLoaded() {
				<sl-drawer
					x-ref="formDrawer"
					label="Add a new order"
					label="Drawer"
					placement="start"
					class="drawer-placement-start"
				>
					@componentOrderForm(form, addressCountryOptions, shippingCompanyOptions)
				</sl-drawer>
			}
			<h1 class="mt-2 mb-2">Pending Orders</h1>
			if len(shippingOrders) < 1 {
				<p>No currently pending orders.</p>
			}
			for i, o := range shippingOrders {
				<h1>Order #{ fmt.Sprintf("%d", i) } </h1>
				<table class="border border-solid">
					<tr>
						<td>Company Name</td>
						<td>{ o.CompanyName.String() } </td>
					</tr>
					<tr>
						<td>First Name</td>
						<td>{ o.ContactFirstName.String() } </td>
					</tr>
					<tr>
						<td>Last Name</td>
						<td>{ o.ContactLastName.String() } </td>
					</tr>
					<tr>
						<td>Email</td>
						<td>{ o.ContactEmail.String() } </td>
					</tr>
					<tr>
						<td>Phone</td>
						<td>{ o.ContactPhone.String() } </td>
					</tr>
					<tr>
						<td>Express</td>
						if o.Express {
							<td>Yes </td>
						} else {
							<td>No </td>
						}
					</tr>
					<tr>
						<td>Shipping Company</td>
						<td>{ o.ShippingCompany.String() } </td>
					</tr>
					<tr>
						<td>Due</td>
						<td>{ o.Due.Format(time.RFC822) } </td>
					</tr>
					<tr>
						<td>Special Notes</td>
						<td>{ o.SpecialNotes.String() } </td>
					</tr>
				</table>
			}
		</div>
	</div>
}

templ pageIndex(
	form Form,
	darkMode bool,
	addressCountryOptions []NamedOption,
	shippingCompanyOptions []NamedOption,
	shippingOrders []domain.ShippingDetails,
) {
	@htmlMain("Index", darkMode) {
		@viewIndex(
			form,
			addressCountryOptions,
			shippingCompanyOptions,
			shippingOrders,
		)
	}
}

templ componentOrderForm(
	form Form,
	addressCountryOptions []NamedOption,
	shippingCompanyOptions []NamedOption,
) {
	// @keydown.enter.prevent on inputs prevents accidental form submission.
	<form
		id="form"
		class="grid gap-2 grid-cols-2"
		hx-post="/form/"
		hx-target="#form"
		hx-sync="this:replace"
		hx-swap="morph:outerHTML"
		hx-trigger="sl-change"
	>
		<h2 class="col-span-full">Contact</h2>
		// Company Name
		<div class="flex flex-col gap-1 col-span-full">
			@skeleton("100%", "4.2rem") {
				<sl-input
					id="input-company-name"
					name="companyName"
					label="Company Name"
					value={ form.ValueCompanyName }
					@keydown.enter.prevent
				>
					<sl-icon slot="prefix" name="buildings"></sl-icon>
				</sl-input>
			}
			if form.ErrorCompanyName != "" {
				<p class="mb-2 text-red-600">‚ö†Ô∏è { form.ErrorCompanyName }</p>
			}
		</div>
		// First Name
		<div class="flex flex-col gap-1">
			@skeleton("100%", "4.2rem") {
				<sl-input
					id="input-first-name"
					name="firstName"
					label="First Name"
					value={ form.ValueFirstName }
					@keydown.enter.prevent
				>
					<sl-icon slot="prefix" name="person"></sl-icon>
				</sl-input>
			}
			if form.ErrorFirstName != "" {
				<p class="mb-2 text-red-600">‚ö†Ô∏è { form.ErrorFirstName }</p>
			}
		</div>
		// Last Name
		<div class="flex flex-col gap-1">
			@skeleton("100%", "4.2rem") {
				<sl-input
					id="input-last-name"
					name="lastName"
					label="Last Name"
					value={ form.ValueLastName }
					@keydown.enter.prevent
				>
					<sl-icon slot="prefix" name="person"></sl-icon>
				</sl-input>
			}
			if form.ErrorLastName != "" {
				<p class="mb-2 text-red-600">‚ö†Ô∏è { form.ErrorLastName }</p>
			}
		</div>
		// Email
		<div class="flex flex-col gap-1">
			@skeleton("100%", "4.2rem") {
				<sl-input
					id="input-email"
					name="email"
					type="email"
					label="Email"
					value={ form.ValueEmail }
					@keydown.enter.prevent
				>
					<sl-icon slot="prefix" name="envelope"></sl-icon>
				</sl-input>
			}
			if form.ErrorEmail != "" {
				<p class="mb-2 text-red-600">‚ö†Ô∏è { form.ErrorEmail }</p>
			}
		</div>
		// Phone Number
		<div class="flex flex-col gap-1">
			@skeleton("100%", "4.2rem") {
				<sl-input
					id="input-phone"
					name="phone"
					type="tel"
					label="Phone Number"
					value={ form.ValuePhone }
					@keydown.enter.prevent
				>
					<sl-icon slot="prefix" name="telephone"></sl-icon>
				</sl-input>
			}
			if form.ErrorPhone != "" {
				<p class="mb-2 text-red-600 animate-fade-in">‚ö†Ô∏è { form.ErrorPhone }</p>
			}
		</div>
		// Address Country
		<h2 class="col-span-full">Address</h2>
		<div class="flex flex-col gap-1">
			@skeleton("100%", "4.2rem") {
				<sl-select
					id="input-address-country"
					name="addressCountry"
					label="Country"
					value={ form.ValueAddressCountry }
					@keydown.enter.prevent
				>
					if form.ValueAddressCountry != "" {
						<slx-countryflag
							slot="prefix"
							width="22"
							code={ form.ValueAddressCountry }
						></slx-countryflag>
					} else {
						<sl-icon slot="prefix" name="map"></sl-icon>
					}
					@fragmentCountryOptions(addressCountryOptions)
				</sl-select>
			}
			if form.ErrorAddressCountry != "" {
				<p class="mb-2 text-red-600">‚ö†Ô∏è { form.ErrorAddressCountry }</p>
			}
		</div>
		// Address Postal Code
		<div class="flex flex-col gap-1">
			@skeleton("100%", "4.2rem") {
				<sl-input
					id="input-address-postal-code"
					name="addressPostalCode"
					label="Postal Code"
					value={ form.ValueAddressPostalCode }
					@keydown.enter.prevent
				>
					<sl-icon slot="prefix" name="mailbox-flag"></sl-icon>
				</sl-input>
			}
			if form.ErrorAddressPostalCode != "" {
				<p class="mb-2 text-red-600">‚ö†Ô∏è { form.ErrorAddressPostalCode }</p>
			}
		</div>
		// Address City
		<div class="flex flex-col gap-1 col-span-full">
			@skeleton("100%", "4.2rem") {
				<sl-input
					id="input-address-city"
					name="addressCity"
					label="City"
					value={ form.ValueAddressCity }
					@keydown.enter.prevent
				>
					<sl-icon slot="prefix" name="geo-alt"></sl-icon>
				</sl-input>
			}
			if form.ErrorAddressCity != "" {
				<p class="mb-2 text-red-600">‚ö†Ô∏è { form.ErrorAddressCity }</p>
			}
		</div>
		<h2 class="col-span-full">Shipping</h2>
		// Due Date
		<div class="flex flex-col gap-1">
			@skeleton("100%", "4.2rem") {
				<sl-input
					id="input-due"
					name="due"
					type="date"
					label="Due Date"
					value={ form.ValueDue }
					@keydown.enter.prevent
				></sl-input>
			}
			if form.ErrorDue != "" {
				<p class="mb-2 text-red-600">‚ö†Ô∏è { form.ErrorDue }</p>
			}
		</div>
		// Shipping Company
		<div class="flex flex-col gap-1">
			@skeleton("100%", "4.2rem") {
				<sl-select
					id="input-shipping-company"
					name="shippingCompany"
					label="Shipping Company"
					value={ form.ValueShippingCompanyID }
					@keydown.enter.prevent
				>
					<sl-icon slot="prefix" name="truck"></sl-icon>
					@fragmentNamedOptions(shippingCompanyOptions)
				</sl-select>
			}
			if form.ErrorShippingCompany != "" {
				<p class="mb-2 text-red-600">‚ö†Ô∏è { form.ErrorShippingCompany }</p>
			}
		</div>
		// Express Shipping
		<div class="flex items-center gap-1 col-span-full">
			@skeleton("100%", "1.5rem") {
				<sl-checkbox
					id="input-express"
					name="express"
					if form.ValueExpress != "" {
						checked
					}
					@keydown.enter.prevent
				>
					Express
				</sl-checkbox>
			}
		</div>
		<h2 class="col-span-full">Additional</h2>
		// Special Notes
		<div class="flex flex-col gap-1 col-span-full">
			@skeleton("100%", "8.4rem") {
				<sl-textarea
					id="input-special-notes"
					name="specialNotes"
					label="Special Notes"
					resize="auto"
					value={ form.ValueSpecialNotes }
				></sl-textarea>
			}
		</div>
		if form.ErrorSpecialNotes != "" {
			<p class="mb-2 text-red-600">‚ö†Ô∏è { form.ErrorSpecialNotes }</p>
		}
		<div class="mt-6 col-span-full">
			@skeleton("100%", "2.6rem") {
				<sl-tooltip
					if !form.IsValid() {
						content={ "Some inputs are either missing or incorrect. "+
								"Please correct them first." }
					} else {
						content="Submit new order"
					}
				>
					<sl-button
						if !form.IsValid() {
							disabled
						}
						hx-post="/orders/"
						hx-swap="innerHTML"
						hx-target="#viewport"
					>
						Add
						<sl-icon slot="prefix" name="file-earmark-plus"></sl-icon>
					</sl-button>
				</sl-tooltip>
				<sl-tooltip content="Randomize form inputs">
					<sl-button
						type="randomize"
						hx-post="/form/randomized/"
						hx-target="#form"
						hx-swap="morph:outerHTML"
					>
						Randomize
						<sl-icon slot="prefix" name="dice-3-fill"></sl-icon>
					</sl-button>
				</sl-tooltip>
			}
		</div>
	</form>
}

templ fragmentCountryOptions(opts []NamedOption) {
	for _, opt := range opts {
		@slOption(opt) {
			<slx-countryflag
				slot="prefix"
				width="22"
				code={ opt.Value }
			></slx-countryflag>
		}
	}
}

templ fragmentNamedOptions(opts []NamedOption) {
	for _, opt := range opts {
		@slOption(opt)
	}
}

// slOption is an instance of <sl-option> that's automatically revealed
// on window.load and htmx:afterSwap events to avoid CLS (cumulative layout shift).
templ slOption(o NamedOption) {
	<sl-option value={ o.Value }>
		{ o.Name }
		{ children... }
	</sl-option>
}

// skeleton reserves space for the children to avoid CLS (cumulative layout shift)
// and provide visual loading indication while the contents are initializing.
templ skeleton(minWidth, minHeight string) {
	<div
		{ templ.Attributes{
			"class": "skeleton",
			"style": "min-width:"+minWidth+";min-height:"+minHeight,
		}... }
	>
		{ children... }
	</div>
}

// hideUntilLoaded hides contents that would flash into view before hiding behind
// dynamic JS container components to avoid CLS (cumulative layout shift) and flashing.
templ hideUntilLoaded() {
	<div class="hide-until-loaded">
		{ children... }
	</div>
}
