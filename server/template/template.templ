package template

import "fmt"
import "time"
import "github.com/romshark/demo-islands/domain"

templ htmlMain(title string) {
	<!DOCTYPE html>
	<html lang="en">
		<head>
			<title>{ title }</title>
			<meta name="viewport" content="width=device-width, initial-scale=1">
			<meta charset="UTF-8">
			<meta name="description" content="Islands-Architecture Web App Demo">
			
			<script src="https://unpkg.com/htmx.org@2.0.3"></script>
			<script src="https://unpkg.com/idiomorph@0.3.0/dist/idiomorph-ext.min.js"></script>
			<script src="https://cdn.jsdelivr.net/npm/@alpinejs/collapse@3.x.x/dist/cdn.min.js" defer></script>
			<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@shoelace-style/shoelace@2.17.1/cdn/themes/light.css" />
			
			<script src="/public/components.js" type="module"></script>
			<link rel="stylesheet" href="/public/dist.css"/>
			<script src="/public/dist.js"></script>
			<link rel="icon" href="/public/favicon.ico"/>
		</head>
		<body hx-ext="morph">
			<div id="viewport">
				{ children... }
			</div>
		</body>
	</html>
}

templ viewIndex(
	form Form,
	addressCountryOptions []NamedOption,
	shippingCompanyOptions []NamedOption,
	shippingOrders []domain.ShippingDetails,
) {
	<div class="md:container md:mx-auto ml-4 mr-4 pb-16">
		<div class="mt-4">
			@componentOrderForm(form, addressCountryOptions, shippingCompanyOptions)
		</div>
		<hr class="mt-4">
		<h1 class="mt-2 mb-2">Pending Orders</h1>
		if len(shippingOrders) < 1 {
			<p>No currently pending orders.</p>
		}
		for i, o := range shippingOrders {
			<h1>Order #{ fmt.Sprintf("%d", i) } </h1>
			<table class="border border-solid">
				<tr>
					<td>Company Name</td>
					<td> { o.CompanyName.String() } </td>
				</tr>
				<tr>
					<td>First Name</td>
					<td> { o.ContactFirstName.String() } </td>
				</tr>
				<tr>
					<td>Last Name</td>
					<td> { o.ContactLastName.String() } </td>
				</tr>
				<tr>
					<td>Email</td>
					<td> { o.ContactEmail.String() } </td>
				</tr>
				<tr>
					<td>Phone</td>
					<td> { o.ContactPhone.String() } </td>
				</tr>
				<tr>
					<td>Express</td>
					if o.Express {
						<td> Yes </td>
					} else {
						<td> No </td>
					}
				</tr>
				<tr>
					<td>Shipping Company</td>
					<td> { o.ShippingCompany.String() } </td>
				</tr>
				<tr>
					<td>Due</td>
					<td> { o.Due.Format(time.RFC822) } </td>
				</tr>
				<tr>
					<td>Special Notes</td>
					<td> { o.SpecialNotes.String() } </td>
				</tr>
			</table>
		}
	</div>
}

templ pageIndex(
	form Form,
	addressCountryOptions []NamedOption,
	shippingCompanyOptions []NamedOption,
	shippingOrders []domain.ShippingDetails,
) {
	@htmlMain("Index") {
		@viewIndex(
			form,
			addressCountryOptions,
			shippingCompanyOptions,
			shippingOrders,
		)
	}
}

templ componentOrderForm(
	form Form,
	addressCountryOptions []NamedOption,
	shippingCompanyOptions []NamedOption,
) {
	<form
		class="grid gap-2 grid-cols-2"
		hx-post="/form/"
		hx-target="this"
		hx-swap="morph:outerHTML"
		hx-trigger="sl-input delay:400ms">
		<h2 class="col-span-full">Contact</h2>
		// Company Name
		<div class="flex flex-col gap-1 col-span-full">
			<sl-input
				id="input-company-name"
				name="companyName"
				label="Company Name"
				value={form.ValueCompanyName}
			>
				<sl-icon slot="prefix" name="buildings"></sl-icon>
			</sl-input>
			if form.ErrorCompanyName != "" {
				@animatedAppear() {
					<p class="mb-2 text-red-600">⚠️ { form.ErrorCompanyName }</p>
				}
			}
		</div>
		// First Name
		<div class="flex flex-col gap-1">
			<sl-input
				id="input-first-name"
				name="firstName"
				label="First Name"
				value={form.ValueFirstName}>
				<sl-icon slot="prefix" name="person"></sl-icon>
			</sl-input>
			if form.ErrorFirstName != "" {
				@animatedAppear() {
					<p class="mb-2 text-red-600">⚠️ { form.ErrorFirstName }</p>
				}
			}
		</div>
		// Last Name
		<div class="flex flex-col gap-1">
			<sl-input
				id="input-last-name"
				name="lastName"
				label="Last Name"
				value={form.ValueLastName}
			>
				<sl-icon slot="prefix" name="person"></sl-icon>
			</sl-input>
			if form.ErrorLastName != "" {
				@animatedAppear() {
					<p class="mb-2 text-red-600">⚠️ { form.ErrorLastName }</p>
				}
			}
		</div>
		// Email
		<div class="flex flex-col gap-1">
			<sl-input
				id="input-email"
				name="email"
				type="email"
				label="Email"
				value={form.ValueEmail}
			>
				<sl-icon slot="prefix" name="envelope"></sl-icon>
			</sl-input>
			if form.ErrorEmail != "" {
				@animatedAppear() {
					<p class="mb-2 text-red-600">⚠️ { form.ErrorEmail }</p>
				}
			}
		</div>
		// Phone Number
		<div class="flex flex-col gap-1">
			<sl-input
				id="input-phone"
				name="phone"
				type="tel"
				label="Phone Number"
				value={form.ValuePhone}
			>
				<sl-icon slot="prefix" name="telephone"></sl-icon>
			</sl-input>
			if form.ErrorPhone != "" {
				@animatedAppear() {
					<p class="mb-2 text-red-600 animate-fade-in">⚠️ { form.ErrorPhone }</p>
				}
			}
		</div>
		// Address Country
		<h2 class="col-span-full">Address</h2>
		<div class="flex flex-col gap-1">
			<sl-select
				id="input-address-country"
				name="addressCountry"
				label="Country"
				value={form.ValueAddressCountry}
			>
				if form.ValueAddressCountry != "" {
					<slx-countryflag
						slot="prefix"
						width="22"
						code={form.ValueAddressCountry}></slx-countryflag>
				} else {
					<sl-icon slot="prefix" name="map"></sl-icon>
				}
				@fragmentCountryOptions(addressCountryOptions)
			</sl-select>
			if form.ErrorAddressCountry != "" {
				@animatedAppear() {
					<p class="mb-2 text-red-600">⚠️ { form.ErrorAddressCountry }</p>
				}
			}
		</div>
		// Address Postal Code
		<div class="flex flex-col gap-1">
			<sl-input
				id="input-address-postal-code"
				name="addressPostalCode"
				label="Postal Code"
				value={form.ValueAddressPostalCode}>
				<sl-icon slot="prefix" name="mailbox-flag"></sl-icon>
			</sl-input>
			if form.ErrorAddressPostalCode != "" {
				@animatedAppear() {
					<p class="mb-2 text-red-600">⚠️ { form.ErrorAddressPostalCode }</p>
				}
			}
		</div>
		// Address City
		<div class="flex flex-col gap-1 col-span-full">
			<sl-input
				id="input-address-city"
				name="addressCity"
				label="City"
				value={form.ValueAddressCity}>
				<sl-icon slot="prefix" name="geo-alt"></sl-icon>
			</sl-input>
			if form.ErrorAddressCity != "" {
				@animatedAppear() {
					<p class="mb-2 text-red-600">⚠️ { form.ErrorAddressCity }</p>
				}
			}
		</div>
		<h2 class="col-span-full">Shipping</h2>

		// Due Date
		<div class="flex flex-col gap-1">
			<sl-input
				id="input-due"
				name="due"
				type="date"
				label="Due Date"
				value={form.ValueDue}></sl-input>
			if form.ErrorDue != "" {
				@animatedAppear() {
					<p class="mb-2 text-red-600">⚠️ { form.ErrorDue }</p>
				}
			}
		</div>

		// Shipping Company
		<div class="flex flex-col gap-1">
			<sl-select
				id="input-shipping-company"
				name="shippingCompany"
				label="Shipping Company"
				value={form.ValueShippingCompanyID}>
				<sl-icon slot="prefix" name="truck"></sl-icon>
				@fragmentNamedOptions(shippingCompanyOptions)
			</sl-select>
			if form.ErrorShippingCompany != "" {
				@animatedAppear() {
					<p class="mb-2 text-red-600">⚠️ { form.ErrorShippingCompany }</p>
				}
			}
		</div>

		// Express Shipping
		<div class="flex items-center gap-1 col-span-full">
			<sl-checkbox
				id="input-express"
				name="express"
				if form.ValueExpress != "" {
					checked
				}>
				Express
			</sl-checkbox>
		</div>
		
		<h2 class="col-span-full">Additional</h2>

		// Special Notes
		<div class="flex flex-col gap-1 col-span-full">
			<sl-textarea
				id="input-special-notes"
				name="specialNotes"
				label="Special Notes"
				resize="auto">
				{form.ValueSpecialNotes}
			</sl-textarea>
		</div>
		if form.ErrorSpecialNotes != "" {
			@animatedAppear() {
				<p class="mb-2 text-red-600">⚠️ { form.ErrorSpecialNotes }</p>
			}
		}

		<div class="col-span-full mt-6">
			<sl-button
				if !form.IsValid() {
					disabled
				}
				type="submit"
				hx-post="/orders/"
				hx-swap="innerHTML"
				hx-target="#viewport">
				Add
				<sl-icon slot="prefix" name="file-earmark-plus"></sl-icon>
			</sl-button>
		</div>
	</form>
}

templ fragmentCountryOptions(opts []NamedOption) {
	for _, opt := range opts {
		@slOption(opt) {
			<slx-countryflag
				slot="prefix"
				width="22"
				code={opt.Value}></slx-countryflag>
		}
	}
}

templ fragmentNamedOptions(opts []NamedOption) {
	for _, opt := range opts {
		@slOption(opt)
	}
}

// slOption is an instance of <sl-option> that's automatically revealed
// on window.load and htmx:afterSwap events to avoid CLS (cumulative layout shift).
templ slOption(o NamedOption) {
	// class "hidden" is applied to avoid CLS (cumulative layout shift) on
	// page load. This class will be removed slOptionsReveal on `window.load`
	// and `htmx:afterSwap` events.
	<sl-option class="hidden" value={o.Value}>
		{o.Name}
		{children...}
	</sl-option>
}

templ animatedAppear() {
	<div
		x-data="{b: false}"
		x-init="$nextTick(() => {b = !b})"
		x-show="b"
		x-collapse
		x-collapse.duration.300ms>
		{children...}
	</div>
}
